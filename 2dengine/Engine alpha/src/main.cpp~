#ifndef _stdinc
#define _stdinc
#include <stdio.h>
#include <string>
#include <utility>
using namespace std;
#endif

#ifdef main
#undef main
#endif

#ifndef _SDLincluded
#define _SDLincluded
#include <windows.h>
#include <GL\gl.h>
#include <GL\glu.h>
#include <SDL\SDL.h>
#endif

#define TITLE "Glenishmore"

#include "core.h"

class Elements;
class GameCore;


void collision(Elements);
void physics(Mob*);
void renderscene(SDL_Surface*, SDL_Surface*, SDL_Surface*, SDL_Surface*, int, int);
//Meter shields;

int main(int argc, char **argv) {
//	int done;
	Mob* mobs;
  // Function below not an SDL library call
  SDL_Surface *screen = SDL_Init();
	const int FRAMES_PER_SECOND = 30;
  const int SKIP_TICKS = 2500 / FRAMES_PER_SECOND;
	srand(SDL_GetTicks()); //Initialize random
  int sleep_time = 0;
	SDL_Event events;
	mobs = new Mob;
	
  /* Prepare extra surfaces */
  terrain* ground = new terrain(screen);
	decor* decoration = new decor(screen);
  mobgfx* mobiles = new mobgfx(screen);
  uifx* mobiles = new ui(screen);
	
  /* Initialize the extra surfaces */
  ground->set_xy(20,15);
  ground->redraw();
	decoration->set_xy(20,15);
  decoration->redraw();
  mobiles->set_moblist(mobs->update());

  GameCore::Status::game_is_running(true); // Starts game, menu bypass
	//intro.menu(); //First call initializes menu, keypresses subsequently refresh

	Uint8* key = SDL_GetKeyState(NULL);
	//Setup game elements prior to loop beginning

  // SDL_Getticks() returns the current number of milliseconds
  // that have elapsed since the system was started
  Uint32 next_game_tick = SDL_GetTicks();
  while( GameCore::Status::game_is_running() ) {

    // Mob handling list tick each item and draw
    mobiles->set_moblist(mobs->update());
    mobiles->redraw();

    // Grab terrain and draw all layers
    renderscene(ground->getlayer(), decoration->getlayer(), mobiles->getlayer(), screen, mobiles->get_x(), mobiles->get_y()); //Draw screen
		SDL_PollEvent(&events);
    GameCore::Input::keyproc(&events, mobs); //} //User Input
    next_game_tick += SKIP_TICKS; //Beginning of game loop code
    sleep_time = next_game_tick - SDL_GetTicks();
    if( sleep_time >= 0 ) {
        Sleep( sleep_time );
    }
    else {
      printf("Lag clause entered.\n");
      printf("Sleep time: %d\n", sleep_time);
    }

  }
  printf("Game is exiting %d.\n", GameCore::Status::game_close());
	Sleep(750);
	return(0);
}

// Each screen will be composed of
// Ground Layer always a single unique gfx resource, updates only when player moved
// Static Layer, (plants buildings) non-overlappable ground layer modifications, updates when object evolves or player moves
// Mobs Layer, things which may move and may? overlap, updates when mobs mob
// UI Layer, This stuff must be on top no matter what it occludes, updates when player status changes

// Ground layer can be composed of single 2d array where each int specified a resource
// Same is viable for static layer
// Mobs layer may point to linked list of drawables for that point?
// UI layer will be it's own separate section it does not need the same looping
// 4 calls to prepare each surface, then one call to render scene?
void renderscene(SDL_Surface* terrain, SDL_Surface* decor, SDL_Surface* mobiles, SDL_Surface* screen, int x, int y) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //Clears buffers (clearscreen)

    //Terrain *should* be overdrawn
    SDL_Rect terrainview = { x, y, (640 + x), (480 + y)};

    // the &view needs to be adjusted to correspond to the mobs center & rubberband

    if (SDL_BlitSurface(terrain, &terrainview, screen, NULL) != 0)
    {
        printf("Blit failure: %s\n", SDL_GetError());
    }

    if (SDL_BlitSurface(decor, &terrainview, screen, NULL) != 0)
    {
        printf("Blit failure: %s\n", SDL_GetError());
    }

    // The mobs layer overdraws by 1 or 2 tiles
    SDL_Rect mobview = { 0, 0, 640, 480};
    if (SDL_BlitSurface(mobiles, &mobview, screen, NULL) != 0)
    {
        printf("Blit failure: %s\n", SDL_GetError());
    }
    if (SDL_Flip(screen) != 0)
    {
        printf("Flip failure: %s\n", SDL_GetError());
    }
    //SDL_UpdateRect(terrain,0,0,0,0);
}



void physics(Mob *mobs) {
}

void collision(Mob *mobs) {
}


/* This will move into the init.cpp later and become SDL 2.0 */
SDL_Surface* SDL_Init()
{
/* Initialize SDL for video output */
	if ( SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE) < 0 ) {
		fprintf(stderr, "Unable to initialize SDL: %s\n", SDL_GetError());
		exit(1);
	}
	/* Create a 640x480 OpenGL screen */
	screen = SDL_SetVideoMode(X, Y, 0, SDL_HWACCEL);

	if ( screen == NULL ) {
		fprintf(stderr, "Unable to create OpenGL screen: %s\n", SDL_GetError());
		SDL_Quit();
		exit(2);
	}
	/* Set the title bar in environments that support it */
	SDL_WM_SetCaption(TITLE, NULL);
	// This is where we say that we want a double buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  return screen;
}
