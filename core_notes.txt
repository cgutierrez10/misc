Initial starting point will be state machine for run states.
This will define all the different interfaces and operating modes that need to exist.
Valid modes will include:
(T-I) Title-Intro Menu, may be split into 2 distinct or kept together
(L)   Loading
(GP)  GamePlay
(P)   Pause
(GO)  GameOver
(E)   Exiting

State transitions:
T-I => L
T-I => E
L => GP
L => P
GP => P
GP => GO
P => GP
P => E
P => GO
P => T-I
GO => T-I
GO => L
GO => E
E => close program end all


class gameMode
{
public:
  virtual ~eMode() {}
  virtual void handleInput(eMode& mode, Input input) {}
  virtual void update(eMode& mode) {}
}

class TitleState : public GameState
{
public:
  TitleState()
  
  virtual void handleInput(eMode& mode, Input input) {
      if input == (input L) { // Switch mode to L }
    else if input == (input E) { // Switch mode to E }
  }

  virtual void update(eMode& mode) {
    // continue displaying screen and waiting for input 
  }
}

class LoadState : public GameState
{
public:
  LoadState()
  
  virtual void handleInput(eMode& mode, Input input) {
      if input == (input GP) { // Switch mode to GP }
    else if input == (input P) { // Switch mode to P }
  }

  virtual void update(eMode& mode) {
    // continue loading screen ticks 
    // Eventually handle as switch mode to GP
  }
}

class PlayState : public GameState
{
public:
  PlayState()
  
  virtual void handleInput(eMode& mode, Input input) {
      if input == (input P) { // Switch mode to L }
    else if input == (input GP) { // Switch mode to E }
    else { // Handle all other input as gameplay inputs }
  }

  virtual void update(eMode& mode) {
    // continue displaying screen and waiting for input 
  }
}

class PauseState : public GameState
{
public:
  PauseState()
  
  virtual void handleInput(eMode& mode, Input input) {
      if input == (input GP) { // Switch mode to GP }
    else if input == (input E) { // Switch mode to E }
    else if input == (input GO) { // Switch mode to GO }
    else if input == (input T-I) { // Switch mode to T-I }
  }

  virtual void update(eMode& mode) {
    // continue displaying screen and waiting for input 
  }
}

